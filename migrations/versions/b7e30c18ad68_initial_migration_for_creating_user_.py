"""Initial migration for creating User, Post, Comment, Follower tables

Revision ID: b7e30c18ad68
Revises: 
Create Date: 2024-10-19 17:46:47.290135

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b7e30c18ad68'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('comment')
    op.execute('DROP TABLE "user" CASCADE')

    op.drop_table('follower')
    op.drop_table('post')
    with op.batch_alter_table('comments', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=False))

    with op.batch_alter_table('followers', schema=None) as batch_op:
        batch_op.add_column(sa.Column('followed_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('follow_date', sa.DateTime(), nullable=True))
        batch_op.drop_constraint('followers_user_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['followed_id'], ['id'])
        batch_op.drop_column('id')
        batch_op.drop_column('user_id')

    with op.batch_alter_table('posts', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=False))
        batch_op.alter_column('title',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=120),
               existing_nullable=False)
        batch_op.alter_column('image_url',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.drop_column('location')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('username',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=80),
               existing_nullable=False)
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=120),
               existing_nullable=False)
        batch_op.alter_column('password',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=128),
               existing_nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('password',
               existing_type=sa.String(length=128),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.alter_column('email',
               existing_type=sa.String(length=120),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.alter_column('username',
               existing_type=sa.String(length=80),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)

    with op.batch_alter_table('posts', schema=None) as batch_op:
        batch_op.add_column(sa.Column('location', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
        batch_op.alter_column('image_url',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=200),
               existing_nullable=True)
        batch_op.alter_column('title',
               existing_type=sa.String(length=120),
               type_=sa.VARCHAR(length=200),
               existing_nullable=False)
        batch_op.drop_column('created_at')

    with op.batch_alter_table('followers', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('followers_user_id_fkey', 'users', ['user_id'], ['id'])
        batch_op.drop_column('follow_date')
        batch_op.drop_column('followed_id')

    with op.batch_alter_table('comments', schema=None) as batch_op:
        batch_op.drop_column('created_at')

    op.create_table('post',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('post_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('image_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='post_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='post_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('follower',
    sa.Column('follower_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('followed_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('follow_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['followed_id'], ['user.id'], name='follower_followed_id_fkey'),
    sa.ForeignKeyConstraint(['follower_id'], ['user.id'], name='follower_follower_id_fkey'),
    sa.PrimaryKeyConstraint('follower_id', 'followed_id', name='follower_pkey')
    )
    op.create_table('user',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    sa.UniqueConstraint('email', name='user_email_key'),
    sa.UniqueConstraint('username', name='user_username_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('comment',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['post_id'], ['post.id'], name='comment_post_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='comment_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='comment_pkey')
    )
    # ### end Alembic commands ###
